/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_konicaminolta_cs200_CS200 */

#ifndef _Included_com_konicaminolta_cs200_CS200
#define _Included_com_konicaminolta_cs200_CS200
#ifdef __cplusplus
extern "C" {
#endif
#undef com_konicaminolta_cs200_CS200_SPOT_INDEX
#define com_konicaminolta_cs200_CS200_SPOT_INDEX 0i64
#undef com_konicaminolta_cs200_CS200_OBSERVER_2degree
#define com_konicaminolta_cs200_CS200_OBSERVER_2degree 0L
#undef com_konicaminolta_cs200_CS200_OBSERVER_10degree
#define com_konicaminolta_cs200_CS200_OBSERVER_10degree 1L
#undef com_konicaminolta_cs200_CS200_COLORSPACE_Lxy
#define com_konicaminolta_cs200_CS200_COLORSPACE_Lxy 0L
#undef com_konicaminolta_cs200_CS200_COLORSPACE_Lupvp
#define com_konicaminolta_cs200_CS200_COLORSPACE_Lupvp 1L
#undef com_konicaminolta_cs200_CS200_COLORSPACE_LDeltauv
#define com_konicaminolta_cs200_CS200_COLORSPACE_LDeltauv 2L
#undef com_konicaminolta_cs200_CS200_COLORSPACE_XYZ
#define com_konicaminolta_cs200_CS200_COLORSPACE_XYZ 3L
#undef com_konicaminolta_cs200_CS200_COLORSPACE_DominantWaveLength
#define com_konicaminolta_cs200_CS200_COLORSPACE_DominantWaveLength 4L
/*
 * Class:     com_konicaminolta_cs200_CS200
 * Method:    isConnected
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_konicaminolta_cs200_CS200_isConnected
  (JNIEnv *, jobject);

JNIEXPORT jstring JNICALL Java_com_konicaminolta_cs200_CS200_getSerialID(JNIEnv *jenv, jobject jobj);

/**
 *  Class:     com_konicaminolta_cs200_CS200
 */
JNIEXPORT jint JNICALL Java_com_konicaminolta_cs200_CS200_init(JNIEnv *env, jobject obj);

/*
 * Class:     com_konicaminolta_cs200_CS200
 * Method:    calibrate
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_konicaminolta_cs200_CS200_calibrate
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     com_konicaminolta_cs200_CS200
 * Method:    startMeasurement
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_konicaminolta_cs200_CS200_startMeasurement
  (JNIEnv *, jobject);

/*
 * Class:     com_konicaminolta_cs200_CS200
 * Method:    closeMeasurement
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_com_konicaminolta_cs200_CS200_closeMeasurement
  (JNIEnv *, jobject);

/*
 * Class:     com_konicaminolta_cs200_CS200
 * Method:    getTriStimulus
 * Signature: ()[F
 */
JNIEXPORT jstring JNICALL Java_com_konicaminolta_cs200_CS200_getTriStimulus
  (JNIEnv *, jobject);

/*
 * Class:     com_konicaminolta_cs200_CS200
 * Method:    setSyncAndFrequency
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_konicaminolta_cs200_CS200_setSyncAndFrequency
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     com_konicaminolta_cs200_CS200
 * Method:    getSyncAndFrequency
 * Signature: ()[F
 */
JNIEXPORT jstring JNICALL Java_com_konicaminolta_cs200_CS200_getSyncAndFrequency
  (JNIEnv *, jobject);
/*
 * Class:     com_konicaminolta_cs200_CS200
 * Method:    setSpeed
 * Signature: (II)V
 */
JNIEXPORT void JNICALL Java_com_konicaminolta_cs200_CS200_setSpeed
  (JNIEnv *, jobject, jint, jint);

/*
 * Class:     com_konicaminolta_cs200_CS200
 * Method:    getSpeed
 * Signature: ()[F
 */
JNIEXPORT jstring JNICALL Java_com_konicaminolta_cs200_CS200_getSpeed
  (JNIEnv *, jobject);
#ifdef __cplusplus
}
#endif
#endif
